/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package netbox;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import com.jcraft.jsch.SftpATTRS;
import com.jcraft.jsch.SftpProgressMonitor;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;


public class MainForm extends javax.swing.JFrame {
    
    
    /*
     * Creates new form MainForm
     */
    public void loadFiles(Session session) {
        ChannelSftp sftpChannel = null;
        listModel.removeAllElements();
        attributes.clear();
        try {
            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            Vector files = sftpChannel.ls(remoteWorkingDirectory);
            for (int i = 0; i < files.size(); i++) {
                LsEntry entry = (LsEntry) files.get(i);
                
                attributes.put(entry.getFilename(), entry.getAttrs());
                if (!entry.getFilename().equals(".") && !entry.getFilename().equals("..")) {
                    listModel.addElement(entry.getFilename());
                }
            }
        } catch (Exception ex) {
            statusTestView.setText("Connection failed");
            ex.printStackTrace();
            return;
        }
        sftpChannel.exit();

    }
    Session session;
    Hashtable<String, SftpATTRS> attributes;
    String remoteWorkingDirectory;
    String workingLocalDirectory;
    
    public MainForm(Session session) {
        remoteWorkingDirectory = "/root/storage";
        workingLocalDirectory = "/Users/egor/Documents";
        this.session = session;
        attributes = new Hashtable<>();
        initComponents();
        listModel = new DefaultListModel<>();
        loadFiles(session);
        fileList.setModel(listModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusTestView = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        chooseFileToUpload = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        downloadButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        directoryTextField = new javax.swing.JTextField();
        uploadBar = new javax.swing.JProgressBar();
        downloadBar = new javax.swing.JProgressBar();
        deleteFileButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        chooseDirectoryButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        FileInfoField = new javax.swing.JTextArea();
        workingDirectoryTextField = new javax.swing.JTextField();
        cdButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        fileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fileListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fileList);

        statusTestView.setColumns(20);
        statusTestView.setRows(5);
        jScrollPane2.setViewportView(statusTestView);

        jLabel1.setText("Upload file");

        chooseFileToUpload.setText("Choose");
        chooseFileToUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileToUploadActionPerformed(evt);
            }
        });

        jLabel2.setText("Download file");

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Download directory:");

        directoryTextField.setText("/Documents");
        directoryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryTextFieldActionPerformed(evt);
            }
        });

        deleteFileButton.setBackground(new java.awt.Color(0, 153, 102));
        deleteFileButton.setText("Delete");
        deleteFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFileButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Delete file");

        chooseDirectoryButton.setText("Choose");
        chooseDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDirectoryButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        FileInfoField.setColumns(20);
        FileInfoField.setRows(5);
        FileInfoField.setText("Click on the file");
        jScrollPane3.setViewportView(FileInfoField);

        workingDirectoryTextField.setText("/root/storage");

        cdButton.setText("cd");
        cdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Working directory:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uploadBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(downloadBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(directoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chooseFileToUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chooseDirectoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(deleteFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(0, 141, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(workingDirectoryTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cdButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseFileToUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(uploadBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(downloadBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(directoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseDirectoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(workingDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cdButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseFileToUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileToUploadActionPerformed
        // TODO add your handling code here:
        JFileChooser fileopen = new JFileChooser();
        fileopen.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int ret = fileopen.showDialog(null, "Open");
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();
            SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    try {
                        ChannelSftp sftpChannel = null;
                        sftpChannel = (ChannelSftp) session.openChannel("sftp");
                        sftpChannel.connect();
                        sftpChannel.cd(remoteWorkingDirectory);
                        FileInputStream f = new FileInputStream(file.getAbsoluteFile());
                        sftpChannel.put(f, file.getName(), new SftpProgressMonitor() {
                            int uploaded = 0;
                            int max;

                            @Override
                            public void init(int i, String string, String string1, long max) {

                                statusTestView.setText(statusTestView.getText() + '\n' + "Started");
                                uploadBar.setMaximum((int) file.length());
                                uploadBar.setMinimum(0);
                            }

                            @Override
                            public boolean count(long bytes) {

                                //inside your long running thread when you want to update a Swing component
                                SwingWorker<Void, Void> barWorker = new SwingWorker<Void, Void>() {
                                    @Override
                                    protected Void doInBackground() throws Exception {
                                        System.out.println(uploaded);
                                        uploaded += (int) bytes;
                                        uploadBar.setValue(uploaded);
                                        return null;
                                    }
                                };
                                barWorker.execute();
                                return (true);

                            }

                            @Override
                            public void end() {
                                statusTestView.setText("Upload completed");
                                uploadBar.setValue(0);
                                (new UpdateRunner()).execute();
                                System.out.println(listModel.getSize() + "Size is ");

                            }
                        });

                        sftpChannel.exit();
                    } catch (Exception e1) {
                        e1.printStackTrace();
                        statusTestView.setText(e1.getMessage());
                    }
                    return null;
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_chooseFileToUploadActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        // TODO add your handling code here:
        if (fileList.isSelectionEmpty()) {
            statusTestView.setText("Please choose file to download");
            return;
        }
        statusTestView.setText("Download began");
        SwingWorker<Integer, Integer> worker = new SwingWorker<Integer, Integer>() {
            @Override
            protected Integer doInBackground() throws Exception {
                try {
                    ChannelSftp sftpChannel = null;
                    sftpChannel = (ChannelSftp) session.openChannel("sftp");
                    sftpChannel.connect();
                    sftpChannel.cd(remoteWorkingDirectory);
                    byte[] buffer = new byte[1024];
                    BufferedInputStream bis = new BufferedInputStream(sftpChannel.get(listModel.elementAt(fileList.getSelectedIndex()), new SftpProgressMonitor() {
                        int downloaded = 0;
                        int max;

                        @Override
                        public void init(int i, String string, String string1, long max) {
                            this.max = (int) max;
                            statusTestView.setText(statusTestView.getText() + '\n' + "Started");
                            downloadBar.setMaximum(this.max);
                            downloadBar.setMinimum(0);
                            System.out.println(downloadBar.getMaximum());
                        }

                        @Override
                        public boolean count(long bytes) {

                            //inside your long running thread when you want to update a Swing component
                            SwingWorker<Void, Void> barWorker = new SwingWorker<Void, Void>() {
                                @Override
                                protected Void doInBackground() throws Exception {
                                    downloaded += (int) bytes;
                                    downloadBar.setValue(downloaded);
                                    return null;
                                }
                            };
                            barWorker.execute();
                            return (true);

                        }

                        @Override
                        public void end() {
                            statusTestView.setText("Download completed");
                            downloadBar.setValue(0);
                        }

                    }));

                    File newFile = new File(workingLocalDirectory + "/" + listModel.elementAt(fileList.getSelectedIndex()));
                    OutputStream os = new FileOutputStream(newFile);
                    BufferedOutputStream bos = new BufferedOutputStream(os);
                    int readCount;
                    while ((readCount = bis.read(buffer)) > 0) {
                        bos.write(buffer, 0, readCount);
                    }
                    bis.close();
                    bos.close();

                    sftpChannel.exit();
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
                statusTestView.setText("Download completed");
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void directoryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_directoryTextFieldActionPerformed

    private void chooseDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDirectoryButtonActionPerformed
    
        JFileChooser fileopen = new JFileChooser();
        fileopen.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int ret = fileopen.showDialog(null, "Open");
        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileopen.getSelectedFile();
            directoryTextField.setText(file.getAbsolutePath());
            workingLocalDirectory = file.getAbsolutePath();
        }
 
    }//GEN-LAST:event_chooseDirectoryButtonActionPerformed

    private void deleteFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFileButtonActionPerformed
        // TODO add your handling code here:
        setCursor(Cursor.WAIT_CURSOR);
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
        protected Void doInBackground() throws Exception {
                try {
                    ChannelSftp sftpChannel = null;
                    sftpChannel = (ChannelSftp) session.openChannel("sftp");
                    sftpChannel.connect();
                    sftpChannel.cd(remoteWorkingDirectory);
                    if (fileList.isSelectionEmpty()) {
                        statusTestView.setText("Select file to delete");
                    }
                    sftpChannel.rm(listModel.get(fileList.getSelectedIndex()));
                        
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
                statusTestView.setText("Delete completed");
                return null;
            }

            @Override
        protected void done() {
                (new UpdateRunner()).execute();
                setCursor(Cursor.DEFAULT_CURSOR);
            }

        };
        worker.execute();
    }//GEN-LAST:event_deleteFileButtonActionPerformed

    private void fileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fileListValueChanged
        // aAdding item name to text field
        if (!evt.getValueIsAdjusting()) {
            if (!fileList.isSelectionEmpty()) {
                String selected = fileList.getSelectedValue().toString();
                selected += '\n' + "Size: " + Math.round(attributes.get(listModel.get(fileList.getSelectedIndex())).getSize() / 1024.0) + " KB";
                selected += '\n' + "Is directory - " + attributes.get(listModel.get(fileList.getSelectedIndex())).isDir();
                FileInfoField.setText(selected);
            }
        }
    }//GEN-LAST:event_fileListValueChanged

    private void cdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdButtonActionPerformed
        // TODO add your handling code here:
        if (workingDirectoryTextField.getText().length()>0){
            this.remoteWorkingDirectory = workingDirectoryTextField.getText();
            (new UpdateRunner()).execute();
        }else{
            statusTestView.setText("Directory selection is empty");
        }
    }//GEN-LAST:event_cdButtonActionPerformed

    private DefaultListModel<String> listModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea FileInfoField;
    private javax.swing.JButton cdButton;
    private javax.swing.JButton chooseDirectoryButton;
    private javax.swing.JButton chooseFileToUpload;
    private javax.swing.JButton deleteFileButton;
    private javax.swing.JTextField directoryTextField;
    private javax.swing.JProgressBar downloadBar;
    private javax.swing.JButton downloadButton;
    private javax.swing.JList<String> fileList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea statusTestView;
    private javax.swing.JProgressBar uploadBar;
    private javax.swing.JTextField workingDirectoryTextField;
    // End of variables declaration//GEN-END:variables

    private class UpdateRunner extends SwingWorker<Void, Void> {

    Vector files;

    @Override
    public Void doInBackground() {
        ChannelSftp sftpChannel = null;
        listModel.removeAllElements();
        attributes.clear();
        try {
            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            files = sftpChannel.ls(remoteWorkingDirectory);

        } catch (Exception ex) {
            statusTestView.setText("Connection failed");
            ex.printStackTrace();
        }
        sftpChannel.exit();
        return null;
    }

    @Override
    protected void done() {
        for (int i = 0; i < files.size(); i++) {
            LsEntry entry = (LsEntry) files.get(i);
            attributes.put(entry.getFilename(), entry.getAttrs());
            if (!entry.getFilename().equals(".") && !entry.getFilename().equals("..")) {
                listModel.addElement(entry.getFilename());
            }
        }
    }
}

}
